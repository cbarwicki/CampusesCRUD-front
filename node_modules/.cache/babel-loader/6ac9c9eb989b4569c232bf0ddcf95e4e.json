{"ast":null,"code":"var _jsxFileName = \"C:\\\\School\\\\Csci39548\\\\CRUDapp\\\\WebDevFinal-front\\\\src\\\\components\\\\containers\\\\NewCampusContainer.js\";\n\n/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        address: this.state.address,\n        imageUrl: this.state.imageUrl\n      }; // Add new campus in back-end database\n\n      let newCampus = await this.props.addCampus(campus);\n      if (newCampus !== undefined) // Update state, and trigger redirect to show the new campus\n        this.setState({\n          name: \"\",\n          address: \"\",\n          description: \"\",\n          redirect: true,\n          redirectId: newCampus.id,\n          error: false\n        });else // error handling in case api falls due to wrong input\n        this.setState(prevState => ({ ...prevState,\n          error: true\n        }));\n    };\n\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      address: \"\",\n      imageUrl: \"\",\n      redirect: false,\n      redirectId: null,\n      error: false\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new campus input form\n\n\n  render() {\n    // Redirect to new campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        error: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addCampus: campus => dispatch(addCampusThunk(campus))\n  };\n}; // Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewCampusContainer);","map":{"version":3,"sources":["C:/School/Csci39548/CRUDapp/WebDevFinal-front/src/components/containers/NewCampusContainer.js"],"names":["Header","Component","connect","Redirect","NewCampusView","addCampusThunk","NewCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","state","address","description","imageUrl","newCampus","addCampus","undefined","redirect","redirectId","id","error","prevState","componentWillUnmount","render","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewCampusView from '../views/NewCampusView';\r\nimport { addCampusThunk } from '../../store/thunks';\r\n\r\nclass NewCampusContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      address: \"\",\r\n      description: \"\",\r\n      address: \"\",\r\n      imageUrl: \"\",\r\n      redirect: false, \r\n      redirectId: null,\r\n      error: false\r\n    };\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let campus = {\r\n      name: this.state.name,\r\n      address: this.state.address,\r\n      description: this.state.description,\r\n      address: this.state.address,\r\n      imageUrl: this.state.imageUrl,\r\n    };\r\n    \r\n    // Add new campus in back-end database\r\n    let newCampus = await this.props.addCampus(campus);\r\n\r\n    if(newCampus !== undefined)\r\n    // Update state, and trigger redirect to show the new campus\r\n    this.setState({\r\n      name: \"\",\r\n      address: \"\",\r\n      description: \"\",\r\n      redirect: true, \r\n      redirectId: newCampus.id,\r\n      error: false\r\n    });\r\n    else // error handling in case api falls due to wrong input\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      error: true\r\n    }))\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new campus input form\r\n  render() {\r\n    // Redirect to new campus's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewCampusView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit} \r\n          error = {this.state.error}     \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        addCampus: (campus) => dispatch(addCampusThunk(campus)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewCampusContainer);"]},"metadata":{},"sourceType":"module"}