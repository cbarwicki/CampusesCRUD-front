{"ast":null,"code":"var _jsxFileName = \"C:\\\\School\\\\Csci39548\\\\CRUDapp\\\\WebDevFinal-front\\\\src\\\\components\\\\containers\\\\EditCampusContainer.js\";\n\n/*==================================================\nEditCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { editCampusThunk, fetchCampusThunk } from \"../../store/thunks\";\nimport EditCampusView from '../views/EditCampusView';\nimport { Redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {\n        id: this.state.redirectId,\n        name: this.state.name === undefined ? this.props.campus.name : this.state.name,\n        address: this.state.address === undefined ? this.props.campus.address : this.state.address,\n        description: this.state.description === undefined ? this.props.campus.description : this.state.description,\n        imageUrl: this.state.imageUrl === undefined ? this.props.campus.imageUrl : this.state.imageUrl\n      }; // Edit campus in back-end database\n\n      await this.props.editCampus(campus); // Update state, and trigger redirect to show the new campus\n\n      this.setState({\n        name: \"\",\n        address: \"\",\n        description: \"\",\n        redirect: true,\n        redirectId: this.props.match.params.id\n      });\n    };\n\n    this.state = {\n      name: this.props.campus.name,\n      address: this.props.campus.address,\n      description: this.props.campus.description,\n      imageUrl: this.props.campus.imageUrl,\n      redirect: false,\n      redirectId: this.props.match.params.id\n    };\n    console.log(this.state);\n  } // Capture input data when it is entered\n\n\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  } // Unmount when the component is being removed from the DOM:\n\n\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render a Campus view by passing campus data as props to the corresponding View component\n\n\n  render() {\n    // Redirect to new campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campuses/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        campus: this.props.campus,\n        state: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"EditCampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    editCampus: campus => dispatch(editCampusThunk(campus))\n  };\n}; // Export store-connected container by default\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"sources":["C:/School/Csci39548/CRUDapp/WebDevFinal-front/src/components/containers/EditCampusContainer.js"],"names":["Header","React","Component","connect","editCampusThunk","fetchCampusThunk","EditCampusView","Redirect","EditCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","id","state","redirectId","undefined","address","description","imageUrl","editCampus","redirect","match","params","console","log","componentDidMount","fetchCampus","componentWillUnmount","render","mapState","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nEditCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { editCampusThunk, fetchCampusThunk } from \"../../store/thunks\";\nimport EditCampusView from '../views/EditCampusView';\nimport { Redirect } from 'react-router-dom';\n\n\nclass EditCampusContainer extends Component {\n\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      name: this.props.campus.name,\n      address: this.props.campus.address,\n      description: this.props.campus.description,\n      imageUrl: this.props.campus.imageUrl,\n      redirect: false, \n      redirectId: this.props.match.params.id,\n    };\n    console.log(this.state);\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let campus = {\n      id: this.state.redirectId,\n      name: this.state.name === undefined ? this.props.campus.name: this.state.name,\n      address: this.state.address === undefined ? this.props.campus.address: this.state.address,\n      description: this.state.description ===  undefined ? this.props.campus.description: this.state.description,\n      imageUrl: this.state.imageUrl === undefined ? this.props.campus.imageUrl : this.state.imageUrl,\n    };\n\n    // Edit campus in back-end database\n    await this.props.editCampus(campus);\n\n    // Update state, and trigger redirect to show the new campus\n    this.setState({\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      redirect: true, \n      redirectId: this.props.match.params.id,\n    });\n  }\n\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    // Redirect to new campus's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/campuses/${this.state.redirectId}`}/>)\n    }\n\n    return (\n      <div>\n        <Header />\n        <EditCampusView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}  \n          campus={this.props.campus} state={this.state} \n        />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"EditCampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n    editCampus: (campus) => dispatch(editCampusThunk(campus)),\n  };\n};\n\n// Export store-connected container by default\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditCampusContainer);"]},"metadata":{},"sourceType":"module"}