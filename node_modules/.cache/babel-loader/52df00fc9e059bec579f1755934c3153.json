{"ast":null,"code":"var _jsxFileName = \"C:\\\\School\\\\Csci39548\\\\CRUDapp\\\\WebDevFinal-front\\\\src\\\\components\\\\containers\\\\EditStudentContainer.js\";\n\n/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from \"./Header\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { editStudentThunk, fetchStudentThunk } from \"../../store/thunks\";\nimport EditCampusView from \"../views/EditCampusView\";\nimport { Redirect } from \"react-router-dom\";\nimport EditstudentView from \"../views/EditStudentView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let student = {\n        id: this.props.match.params.id,\n        firstname: this.state.firstname === undefined ? this.props.student.firstname : this.state.firstname,\n        lastname: this.state.lastname === undefined ? this.props.student.lastname : this.state.lastname,\n        campusId: this.state.campusId === undefined ? this.props.student.campusId : this.state.campusId,\n        email: this.state.email === undefined ? this.props.student.email : this.state.email,\n        imageUrl: this.state.imageUrl === undefined ? this.props.student.imageUrl : this.state.imageUrl,\n        gpa: this.state.gpa === undefined ? this.props.student.gpa : this.state.gpa\n      }; // Edit campus in back-end database\n\n      await this.props.editStudent(student); // Update state, and trigger redirect to show the new campus\n\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        campusId: null,\n        email: \"\",\n        imageUrl: \"\",\n        gpa: 0,\n        redirect: true,\n        redirectId: this.props.match.params.id,\n        error: false\n      });\n    };\n\n    this.state = {\n      firstname: this.props.student.firstname,\n      lastname: this.props.student.lastname,\n      campusId: this.props.student.campusId,\n      email: this.props.student.email,\n      imageUrl: this.props.student.imageUrl,\n      gpa: this.props.student.gpa,\n      redirect: false,\n      redirectId: this.props.match.params.id\n    };\n    console.log(this.state);\n  } // Capture input data when it is entered\n\n\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  } // Unmount when the component is being removed from the DOM:\n\n\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render a Campus view by passing campus data as props to the corresponding View component\n\n\n  render() {\n    // Redirect to new campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/students/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditstudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        student: this.props.student\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    student: state.student // Get the State object from Reducer \"campus\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchStudentThunk(id)),\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store\n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"sources":["C:/School/Csci39548/CRUDapp/WebDevFinal-front/src/components/containers/EditStudentContainer.js"],"names":["Header","React","Component","connect","editStudentThunk","fetchStudentThunk","EditCampusView","Redirect","EditstudentView","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","id","match","params","firstname","state","undefined","lastname","campusId","email","imageUrl","gpa","editStudent","redirect","redirectId","error","console","log","componentDidMount","fetchCampus","componentWillUnmount","render","mapState","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from \"./Header\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { editStudentThunk, fetchStudentThunk } from \"../../store/thunks\";\nimport EditCampusView from \"../views/EditCampusView\";\nimport { Redirect } from \"react-router-dom\";\nimport EditstudentView from \"../views/EditStudentView\";\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstname: this.props.student.firstname,\n      lastname: this.props.student.lastname,\n      campusId: this.props.student.campusId,\n      email: this.props.student.email,\n      imageUrl: this.props.student.imageUrl,\n      gpa: this.props.student.gpa,\n      redirect: false,\n      redirectId: this.props.match.params.id,\n    };\n    console.log(this.state);\n  }\n\n  // Capture input data when it is entered\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // Take action after user click the submit button\n  handleSubmit = async (event) => {\n    event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n    let student = {\n      id: this.props.match.params.id,\n      firstname:\n        this.state.firstname === undefined\n          ? this.props.student.firstname\n          : this.state.firstname,\n      lastname:\n        this.state.lastname === undefined\n          ? this.props.student.lastname\n          : this.state.lastname,\n      campusId:\n        this.state.campusId === undefined\n          ? this.props.student.campusId\n          : this.state.campusId,\n      email:\n        this.state.email === undefined\n          ? this.props.student.email\n          : this.state.email,\n      imageUrl:\n        this.state.imageUrl === undefined\n          ? this.props.student.imageUrl\n          : this.state.imageUrl,\n      gpa:\n        this.state.gpa === undefined ? this.props.student.gpa : this.state.gpa,\n    };\n\n    // Edit campus in back-end database\n    await this.props.editStudent(student);\n\n    // Update state, and trigger redirect to show the new campus\n    this.setState({\n      firstname: \"\",\n      lastname: \"\",\n      campusId: null,\n      email: \"\",\n      imageUrl: \"\",\n      gpa: 0,\n      redirect: true,\n      redirectId: this.props.match.params.id,\n      error: false,\n    });\n  };\n\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({ redirect: false, redirectId: null });\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    // Redirect to new campus's page after submit\n    if (this.state.redirect) {\n      return <Redirect to={`/students/${this.state.redirectId}`} />;\n    }\n\n    return (\n      <div>\n        <Header />\n        <EditstudentView\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          student={this.props.student}\n        />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    student: state.student, // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchStudentThunk(id)),\n    editStudent: (student) => dispatch(editStudentThunk(student)),\n  };\n};\n\n// Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store\n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditStudentContainer);\n"]},"metadata":{},"sourceType":"module"}