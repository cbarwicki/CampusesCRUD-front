{"ast":null,"code":"var _jsxFileName = \"C:\\\\School\\\\Csci39548\\\\CRUDapp\\\\client-starter-code-main\\\\src\\\\components\\\\containers\\\\NewCampusContainer.js\";\n\n/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react'; // import { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\nimport NewCampusView from '../views/NewCampusView'; // import { addCampusThunk } from '../../store/thunks';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {}; // Add new campus in back-end database\n\n      let newCampus = await this.props.addCampus(campus); // Update state, and trigger redirect to show the new campus\n\n      this.setState({});\n    };\n\n    this.state = {};\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {//   this.setState({});\n  } // Render new campus input form\n\n\n  render() {\n    // Redirect to new campus's page after submit\n    // if(this.state.redirect) {\n    //   return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\n    // }\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addCampus: (campus) => dispatch(addCampusThunk(campus)),\n//     })\n// }\n// Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default NewCampusContainer; //connect(null, mapDispatch)(NewCampusContainer);","map":{"version":3,"sources":["C:/School/Csci39548/CRUDapp/client-starter-code-main/src/components/containers/NewCampusContainer.js"],"names":["Header","Component","Redirect","NewCampusView","NewCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","newCampus","addCampus","state","componentWillUnmount","render"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B,C,CACA;;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,aAAP,MAA0B,wBAA1B,C,CACA;;;;AAEA,MAAMC,kBAAN,SAAiCH,SAAjC,CAA2C;AACzC;AACAI,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAQlBC,YARkB,GAQHC,KAAK,IAAI;AACtB,WAAKC,QAAL,CAAc;AACZ,SAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AADtB,OAAd;AAGD,KAZiB;;AAAA,SAelBC,YAfkB,GAeH,MAAML,KAAN,IAAe;AAC5BA,MAAAA,KAAK,CAACM,cAAN,GAD4B,CACH;;AAEzB,UAAIC,MAAM,GAAG,EAAb,CAH4B,CAO5B;;AACA,UAAIC,SAAS,GAAG,MAAM,KAAKV,KAAL,CAAWW,SAAX,CAAqBF,MAArB,CAAtB,CAR4B,CAU5B;;AACA,WAAKN,QAAL,CAAc,EAAd;AAGD,KA7BiB;;AAEhB,SAAKS,KAAL,GAAa,EAAb;AAGD,GAPwC,CASzC;;;AAwBA;AACAC,EAAAA,oBAAoB,GAAG,CACrB;AACD,GApCwC,CAsCzC;;;AACAC,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA;AAEA;AACA,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AACE,QAAA,YAAY,EAAI,KAAKb,YADvB;AAEE,QAAA,YAAY,EAAE,KAAKM;AAFrB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAvDwC,C,CA0D3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA,eAAeT,kBAAf,C,CAAmC","sourcesContent":["/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\n// import { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewCampusView from '../views/NewCampusView';\r\n// import { addCampusThunk } from '../../store/thunks';\r\n\r\nclass NewCampusContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      \r\n    };\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let campus = {\r\n        \r\n    };\r\n    \r\n    // Add new campus in back-end database\r\n    let newCampus = await this.props.addCampus(campus);\r\n\r\n    // Update state, and trigger redirect to show the new campus\r\n    this.setState({\r\n      \r\n    });\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n    //   this.setState({});\r\n  }\r\n\r\n  // Render new campus input form\r\n  render() {\r\n    // Redirect to new campus's page after submit\r\n    // if(this.state.redirect) {\r\n    //   return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\r\n    // }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewCampusView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\n// const mapDispatch = (dispatch) => {\r\n//     return({\r\n//         addCampus: (campus) => dispatch(addCampusThunk(campus)),\r\n//     })\r\n// }\r\n\r\n// Export store-connected container by default\r\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default NewCampusContainer; //connect(null, mapDispatch)(NewCampusContainer);"]},"metadata":{},"sourceType":"module"}